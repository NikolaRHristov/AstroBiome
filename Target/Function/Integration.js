var y=(e={})=>{for(const t in e)Object.prototype.hasOwnProperty.call(e,t)&&e[t]===!0&&(e[t]=s[t]);const{Path:r,Cache:c,Logger:p,Exclude:m,Action:u,Rome:i}=f(s,e),n=new Set;if(typeof r<"u"&&(r instanceof Array||r instanceof Set))for(const t of r)n.add(t);return{name:"astro-rome",hooks:{"astro:build:done":async({dir:t})=>{n.size||n.add(t);try{const o=await(await import("@rometools/js-api")).Rome.create({distribution:(await import("@rometools/js-api")).Distribution.NODE}),d=f(u,{Wrote:async a=>{try{return o.formatContent(a.Buffer.toString(),{filePath:(await import("path")).resolve(a.Input)}).content}catch{return a.Buffer}}});i&&i!==!0&&o&&(i.$schema=void 0,o.applyConfiguration(i)),n.forEach(async a=>{await(await(await(await new(await import("files-pipe")).default(c,p).In(a)).By("**/*.{js,mjs,cjs,ts}")).Not(m)).Pipe(d)})}catch(o){console.log(o)}}}}};const{default:s}=await import("../Object/Option.js"),{default:f}=await import("files-pipe/Target/Function/Merge.js");export{s as Default,f as Merge,y as default};
