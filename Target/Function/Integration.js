var l=(e={})=>{for(const t in e)Object.prototype.hasOwnProperty.call(e,t)&&e[t]===!0&&(e[t]=f[t]);const{Path:a,Cache:c,Logger:p,Exclude:m,Action:u,Rome:r}=s(f,e),i=new Set;if(typeof a<"u"&&(a instanceof Array||a instanceof Set))for(const t of a)i.add(t);return{name:"astro-rome",hooks:{"astro:build:done":async({dir:t})=>{i.size||i.add(t);const n=await(await import("@rometools/js-api")).Rome.create({distribution:(await import("@rometools/js-api")).Distribution.NODE});r&&r!==!0&&(r.$schema=void 0,n.applyConfiguration(r));const d=s(u,{Wrote:async o=>{try{return n.formatContent(o.Buffer.toString(),{filePath:(await import("path")).resolve(o.Input)}).content}catch{return o.Buffer}}});i.forEach(async o=>{await(await(await(await new(await import("files-pipe")).default(c,p).In(o)).By("**/*.{js,mjs,cjs,ts}")).Not(m)).Pipe(d)})}}}};const{default:f}=await import("../Object/Option.js"),{default:s}=await import("files-pipe/Target/Function/Merge.js");export{f as Default,s as Merge,l as default};
