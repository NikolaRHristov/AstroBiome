import{Distribution as m,Rome as s}from"@rometools/js-api";import a from"./options/index.js";import{resolve as p}from"path";import{files as c}from"files-pipe";import d from"./lib/get-config.js";import f from"files-pipe/dist/lib/deepmerge.js";var j=(e={})=>{for(const t in e)Object.prototype.hasOwnProperty.call(e,t)&&e[t]===!0&&(e[t]=a[t]);e=f(a,e);const r=new Set;if(typeof e.path<"u"&&(e.path instanceof Array||e.path instanceof Set))for(const t of e.path)r.add(t);return{name:"astro-rome",hooks:{"astro:build:done":async({dir:t})=>{try{r.size||r.add(t);const o=await s.create({distribution:m.NODE});(typeof e.rome>"u"||e.rome===null)&&(e.rome=JSON.parse(await d("rome.json"))),e.rome&&e.rome!==!0&&(e.rome.$schema=void 0,o.applyConfiguration(e.rome));for(const n of r)await(await(await(await new c(e.logger).in(n)).by("**/*.{js,mjs,cjs,ts}")).not(e.exclude)).pipe(f(a.pipe,{wrote:async i=>o.formatContent(i.buffer.toString(),{filePath:p(i.inputPath)}).content}))}catch(o){console.log(o)}}}}};export{j as default};
