import{files as p}from"files-pipe";import s from"files-pipe/dist/lib/deepmerge.js";import{resolve as m}from"path";import{Distribution as c,Rome as u}from"@rometools/js-api";import d from"./lib/get-config.js";import a from"./options/index.js";var O=(e={})=>{for(const o in e)Object.prototype.hasOwnProperty.call(e,o)&&e[o]===!0&&(e[o]=a[o]);const t=s(a,e),r=new Set;if(typeof t.path<"u"&&(t.path instanceof Array||t.path instanceof Set))for(const o of t.path)r.add(o);return{name:"astro-rome",hooks:{"astro:build:done":async({dir:o})=>{try{r.size||r.add(o);const i=await u.create({distribution:c.NODE});(typeof t.rome>"u"||t.rome===null)&&(t.rome=JSON.parse(await d("rome.json"))),t.rome&&t.rome!==!0&&(t.rome.$schema=void 0,i.applyConfiguration(t.rome));for(const f of r)await(await(await(await new p(t.logger).in(f)).by("**/*.{js,mjs,cjs,ts}")).not(t.exclude)).pipe(s(a.pipe,{wrote:async n=>{try{return i.formatContent(n.buffer.toString(),{filePath:m(n.inputPath)}).content}catch{return n.buffer}}}))}catch(i){console.log(i)}}}}};export{O as default};
