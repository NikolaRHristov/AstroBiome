import{Rome as n,Distribution as m}from"@rometools/js-api";import a from"./options/index.js";import{resolve as p}from"path";import{files as s}from"files-pipeline";import d from"./lib/get-config.js";import i from"files-pipeline/dist/lib/deepmerge.js";var g=(e={})=>{for(const t in e)Object.prototype.hasOwnProperty.call(e,t)&&e[t]===!0&&(e[t]=a[t]);e=i(a,e);const r=new Set;if(typeof e.path<"u")if(e.path instanceof Array||e.path instanceof Set)for(const t of e.path)r.add(t);else r.add(e.path);return{name:"astro-rome",hooks:{"astro:build:done":async()=>{if(!e.rome)return;const t=await n.create({distribution:m.NODE});(typeof e.rome>"u"||e.rome===null)&&(e.rome=JSON.parse(await d("rome.json"))),e.rome&&e.rome!==!0&&t.applyConfiguration(e.rome);for(const f of r)await(await(await(await new s(e.logger).in(f)).by("**/*.{js,mjs,cjs,ts}")).not(e.exclude)).pipeline(i(a.pipeline,{wrote:async o=>t.formatContent(o.buffer.toString(),{filePath:p(o.inputPath)}).content}))}}}};export{g as default};
